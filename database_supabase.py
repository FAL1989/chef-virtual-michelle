from typing import Dict, List, Optional, Union
import json
import logging
from datetime import datetime
from supabase import create_client, Client
import streamlit as st
import os

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseError(Exception):
    """Exceção customizada para erros do banco de dados"""
    pass

class ReceitasDB:
    def __init__(self):
        """Inicializa a conexão com o Supabase"""
        try:
            url = st.secrets["SUPABASE_URL"]
            key = st.secrets["SUPABASE_KEY"]
            self.supabase: Client = create_client(url, key)
            logger.info("Conexão estabelecida com Supabase")
            self.criar_tabelas()
        except Exception as e:
            logger.error(f"Erro ao conectar com Supabase: {e}")
            raise

    def criar_tabelas(self):
        """
        Verifica se as tabelas existem.
        No Supabase, as tabelas devem ser criadas manualmente ou via migrations.
        Este método serve apenas para documentação da estrutura.
        """
        """
        Estrutura das tabelas no Supabase:

        -- Tabela de receitas
        create table receitas (
            id bigint generated by default as identity primary key,
            titulo text not null,
            descricao text,
            utensilios text,
            ingredientes text,
            modo_preparo text,
            tempo_preparo text,
            porcoes integer,
            dificuldade text,
            harmonizacao text,
            calorias text,
            proteinas text,
            carboidratos text,
            gorduras text,
            fibras text,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null,
            updated_at timestamp with time zone default timezone('utc'::text, now()) not null
        );

        -- Tabela de dicas
        create table dicas (
            id bigint generated by default as identity primary key,
            receita_id bigint references receitas(id),
            dica text not null,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null
        );

        -- Tabela de benefícios funcionais
        create table beneficios_funcionais (
            id bigint generated by default as identity primary key,
            receita_id bigint references receitas(id),
            beneficio text not null,
            created_at timestamp with time zone default timezone('utc'::text, now()) not null
        );

        -- Trigger para atualizar updated_at
        create or replace function update_updated_at_column()
        returns trigger as $$
        begin
            new.updated_at = now();
            return new;
        end;
        $$ language plpgsql;

        create trigger update_receitas_updated_at
            before update on receitas
            for each row
            execute function update_updated_at_column();
        """
        pass

    def adicionar_receita(self, receita: Dict) -> bool:
        """Adiciona uma nova receita ao banco de dados"""
        try:
            # Garante que os campos numéricos sejam 0 quando vazios
            info_nutri = receita.get('informacoes_nutricionais', {})
            for campo in ['calorias', 'proteinas', 'carboidratos', 'gorduras', 'fibras']:
                valor = info_nutri.get(campo, '')
                info_nutri[campo] = 0 if valor == '' else float(valor)
            receita['informacoes_nutricionais'] = info_nutri

            # Garante que arrays sejam listas vazias quando nulos
            for campo in ['ingredientes', 'modo_preparo', 'beneficios_funcionais', 'dicas']:
                if not receita.get(campo):
                    receita[campo] = []

            # Garante que strings sejam vazias quando nulas
            for campo in ['titulo', 'descricao', 'categoria', 'tempo_preparo', 'porcoes', 'dificuldade', 'utensilios', 'harmonizacao']:
                if not receita.get(campo):
                    receita[campo] = ''

            data = self.supabase.table('receitas').insert(receita).execute()
            return True
        except Exception as e:
            logger.error(f"Erro ao adicionar receita: {e}")
            return False

    def buscar_receitas(self, query: str = None) -> List[Dict]:
        """Busca receitas no banco de dados"""
        try:
            if query:
                # Busca por título ou descrição
                data = self.supabase.table('receitas').select('*').or_(
                    f"titulo.ilike.%{query}%,descricao.ilike.%{query}%"
                ).execute()
            else:
                # Retorna todas as receitas
                data = self.supabase.table('receitas').select('*').execute()
            return data.data
        except Exception as e:
            logger.error(f"Erro ao buscar receitas: {e}")
            return []

    @staticmethod
    @st.cache_data(ttl=3600)
    def buscar_receitas_cached(query: str = None) -> List[Dict]:
        """Busca receitas no banco de dados com cache"""
        try:
            # Cria uma nova instância para cada busca
            db = ReceitasDB()
            return db.buscar_receitas(query)
        except Exception as e:
            logger.error(f"Erro ao buscar receitas: {e}")
            return []

    def exportar_receitas(self, formato: str = 'json') -> Union[str, Dict]:
        """Exporta todas as receitas em um formato específico"""
        try:
            receitas = self.buscar_receitas()
            
            if formato == 'json':
                return json.dumps(receitas, ensure_ascii=False, indent=2)
            elif formato == 'markdown':
                texto = "# Receitas da Chef Michelle\n\n"
                texto += f"Exportado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n"
                
                for receita in receitas:
                    texto += f"## {receita['titulo']}\n\n"
                    if receita.get('descricao'):
                        texto += f"{receita['descricao']}\n\n"
                    texto += "### Ingredientes\n\n"
                    texto += f"{receita['ingredientes']}\n\n"
                    texto += "### Modo de Preparo\n\n"
                    texto += f"{receita['modo_preparo']}\n\n"
                    if receita['dicas']:
                        texto += "### Dicas\n\n"
                        for dica in receita['dicas']:
                            texto += f"- {dica}\n"
                        texto += "\n"
                    if receita['beneficios_funcionais']:
                        texto += "### Benefícios Funcionais\n\n"
                        for beneficio in receita['beneficios_funcionais']:
                            texto += f"- {beneficio}\n"
                        texto += "\n"
                    texto += "---\n\n"
                return texto
            else:
                raise ValueError(f"Formato '{formato}' não suportado")
        except Exception as e:
            logger.error(f"Erro ao exportar receitas: {e}")
            return "" if formato == 'markdown' else "{}"

    @staticmethod
    @st.cache_data(ttl=3600)
    def exportar_receitas_cached() -> List[Dict]:
        """Exporta todas as receitas do banco de dados com cache"""
        try:
            # Cria uma nova instância para cada exportação
            db = ReceitasDB()
            return db.exportar_receitas()
        except Exception as e:
            logger.error(f"Erro ao exportar receitas: {e}")
            return [] 